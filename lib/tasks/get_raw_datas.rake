require 'net/http'
require 'active_support/core_ext/hash'
require 'json'
require 'open-uri'
require 'resolv-replace'

desc "[아파트 매매 거래 raw_data 수집]"
task trade_get_raw_datas: :environment do
  puts "[start]"

  # region_code setting
  # 전체 시군구 코드
  lawd_codes = %w(서울특별시종로구  11110 서울특별시중구  11140 서울특별시용산구 11170 서울특별시성동구 11200 서울특별시광진구 11215 서울특별시동대문구  11230 서울특별시중랑구 11260 서울특별시성북구 11290 서울특별시강북구 11305 서울특별시도봉구 11320 서울특별시노원구 11350 서울특별시은평구 11380 서울특별시서대문구  11410 서울특별시마포구 11440 서울특별시양천구 11470 서울특별시강서구 11500 서울특별시구로구 11530 서울특별시금천구 11545 서울특별시영등포구  11560 서울특별시동작구 11590 서울특별시관악구 11620 서울특별시서초구 11650 서울특별시강남구 11680 서울특별시송파구 11710 서울특별시강동구 11740 부산직할시  21000 부산직할시중구  21110 부산직할시서구  21140 부산직할시동구  21170 부산직할시영도구 21200 부산직할시부산진구  21230 부산직할시동래구 21260 부산직할시남구  21290 부산직할시북구  21320 부산직할시해운대구  21350 부산직할시사하구 21380 부산직할시금정구 21410 부산직할시강서구 21440 대구직할시  22000 대구직할시중구  22110 대구직할시동구  22140 대구직할시서구  22170 대구직할시남구  22200 대구직할시북구  22230 대구직할시수성구 22260 대구직할시달서구 22290 인천직할시  23000 인천직할시중구  23110 인천직할시동구  23140 인천직할시남구  23170 인천직할시남동구 23200 인천직할시북구  23230 인천직할시서구  23260 광주직할시  24000 광주직할시동구  24110 광주직할시서구  24140 광주직할시북구  24170 광주직할시광산구 24200 대전직할시  25000 대전직할시동구  25110 대전직할시중구  25140 대전직할시서구  25170 대전직할시유성구 25200 대전직할시대덕구 25230 부산광역시  26000 부산광역시중구  26110 부산광역시서구  26140 부산광역시동구  26170 부산광역시영도구 26200 부산광역시부산진구  26230 부산광역시동래구 26260 부산광역시남구  26290 부산광역시북구  26320 부산광역시해운대구  26350 부산광역시사하구 26380 부산광역시금정구 26410 부산광역시강서구 26440 부산광역시연제구 26470 부산광역시수영구 26500 부산광역시사상구 26530 부산광역시기장군 26710 대구광역시  27000 대구광역시중구  27110 대구광역시동구  27140 대구광역시서구  27170 대구광역시남구  27200 대구광역시북구  27230 대구광역시수성구 27260 대구광역시달서구 27290 대구광역시달성군 27710 인천광역시  28000 인천광역시중구  28110 인천광역시동구  28140 인천광역시남구  28170 인천광역시미추홀구  28177 인천광역시연수구 28185 인천광역시남동구 28200 인천광역시북구  28230 인천광역시부평구 28237 인천광역시계양구 28245 인천광역시서구  28260 인천광역시강화군 28710 인천광역시옹진군 28720 광주광역시  29000 광주광역시동구  29110 광주광역시서구  29140 광주광역시남구  29155 광주광역시북구  29170 광주광역시광산구 29200 대전광역시  30000 대전광역시동구  30110 대전광역시중구  30140 대전광역시서구  30170 대전광역시유성구 30200 대전광역시대덕구 30230 울산광역시  31000 울산광역시중구  31110 울산광역시남구  31140 울산광역시동구  31170 울산광역시북구  31200 울산광역시울주군 31710 세종특별자치시  36110 세종특별자치시반곡동 36110 세종특별자치시소담동 36110 세종특별자치시보람동 36110 세종특별자치시대평동 36110 세종특별자치시가람동 36110 세종특별자치시한솔동 36110 세종특별자치시나성동 36110 세종특별자치시새롬동 36110 세종특별자치시다정동 36110 세종특별자치시어진동 36110 세종특별자치시종촌동 36110 세종특별자치시고운동 36110 세종특별자치시아름동 36110 세종특별자치시도담동 36110 세종특별자치시조치원읍  36110 세종특별자치시연기면 36110 세종특별자치시연동면 36110 세종특별자치시부강면 36110 세종특별자치시금남면 36110 세종특별자치시장군면 36110 세종특별자치시연서면 36110 세종특별자치시전의면 36110 세종특별자치시전동면 36110 세종특별자치시소정면 36110 경기도  41000 경기도인천시 41010 경기도인천시 41011 경기도인천시 41012 경기도인천시 41013 경기도인천시 41014 경기도부천군 41050 경기도수원시 41110 경기도수원시 41111 경기도수원시 41113 경기도수원시 41115 경기도수원시 41117 경기도성남시 41130 경기도성남시 41131 경기도성남시 41133 경기도성남시 41135 경기도의정부시  41150 경기도안양시 41170 경기도안양시 41171 경기도안양시 41173 경기도부천시 41190 경기도부천시 41191 경기도부천시 41193 경기도부천시 41195 경기도부천시 41197 경기도부천시 41199 경기도광명시 41210 경기도평택시 41220 경기도송탄시 41230 경기도동두천시  41250 경기도안산시 41270 경기도안산시 41271 경기도안산시 41273 경기도고양시 41280 경기도고양시 41281 경기도고양시 41283 경기도고양시 41285 경기도고양시 41287 경기도과천시 41290 경기도구리시 41310 경기도평택시 41330 경기도미금시 41350 경기도남양주시  41360 경기도오산시 41370 경기도시흥시 41390 경기도군포시 41410 경기도의왕시 41430 경기도하남시 41450 경기도용인시 41460 경기도용인시 41461 경기도용인시 41463 경기도용인시 41465 경기도파주시 41480 경기도이천시 41500 경기도안성시 41550 경기도김포시 41570 경기도화성시 41590 경기도광주시 41610 경기도양주시 41630 경기도포천시 41650 경기도여주시 41670 경기도양주군 41710 경기도남양주군  41720 경기도여주군 41730 경기도평택군 41740 경기도화성군 41750 경기도시흥군 41760 경기도파주군 41770 경기도고양군 41780 경기도광주군 41790 경기도연천군 41800 경기도포천군 41810 경기도가평군 41820 경기도양평군 41830 경기도이천군 41840 경기도용인군 41850 경기도안성군 41860 경기도김포군 41870 경기도강화군 41880 경기도옹진군 41890 강원도  42000 강원도울진군 42050 강원도춘천시 42110 강원도원주시 42130 강원도강릉시 42150 강원도동해시 42170 강원도태백시 42190 강원도속초시 42210 강원도삼척시 42230 강원도춘성군 42710 강원도춘천군 42715 강원도홍천군 42720 강원도횡성군 42730 강원도원성군 42740 강원도원주군 42745 강원도영월군 42750 강원도평창군 42760 강원도정선군 42770 강원도철원군 42780 강원도화천군 42790 강원도양구군 42800 강원도인제군 42810 강원도고성군 42820 강원도양양군 42830 강원도명주군 42840 강원도삼척군 42850 충청북도 43000 충청북도제천군  43050 충청북도청주시  43110 충청북도청주시  43111 충청북도청주시  43112 충청북도청주시  43113 충청북도청주시  43114 충청북도충주시  43130 충청북도제천시  43150 충청북도청원군  43710 충청북도보은군  43720 충청북도옥천군  43730 충청북도영동군  43740 충청북도증평군  43745 충청북도진천군  43750 충청북도괴산군  43760 충청북도음성군  43770 충청북도중원군  43780 충청북도제원군  43790 충청북도제천군  43795 충청북도단양군  43800 충청남도 44000 충청남도천안군  44050 충청남도대전시  44110 충청남도대전시  44111 충청남도대전시  44113 충청남도대전시  44115 충청남도천안시  44130 충청남도천안시  44131 충청남도천안시  44133 충청남도공주시  44150 충청남도대천시  44170 충청남도보령시  44180 충청남도온양시  44190 충청남도아산시  44200 충청남도서산시  44210 충청남도논산시  44230 충청남도계룡시  44250 충청남도당진시  44270 충청남도금산군  44710 충청남도대덕군  44720 충청남도연기군  44730 충청남도공주군  44740 충청남도논산군  44750 충청남도부여군  44760 충청남도서천군  44770 충청남도보령군  44780 충청남도청양군  44790 충청남도홍성군  44800 충청남도예산군  44810 충청남도서산군  44820 충청남도태안군  44825 충청남도당진군  44830 충청남도아산군  44840 충청남도천원군  44850 충청남도천안군  44860 전라북도 45000 전라북도금산군  45050 전라북도전주시  45110 전라북도전주시  45111 전라북도전주시  45113 전라북도군산시  45130 전라북도익산시  45140 전라북도이리시  45150 전라북도정주시  45170 전라북도정읍시  45180 전라북도남원시  45190 전라북도김제시  45210 전라북도완주군  45710 전라북도진안군  45720 전라북도무주군  45730 전라북도장수군  45740 전라북도임실군  45750 전라북도남원군  45760 전라북도순창군  45770 전라북도정읍군  45780 전라북도고창군  45790 전라북도부안군  45800 전라북도김제군  45810 전라북도옥구군  45820 전라북도익산군  45830 전라남도 46000 전라남도광주시  46010 전라남도광주시  46011 전라남도광주시  46012 전라남도광주시  46013 전라남도금성시  46020 전라남도송정시  46030 전라남도광산군  46050 전라남도목포시  46110 전라남도여수시  46130 전라남도순천시  46150 전라남도나주시  46170 전라남도여천시  46190 전라남도동광양시 46210 전라남도광양시  46230 전라남도담양군  46710 전라남도곡성군  46720 전라남도구례군  46730 전라남도광양군  46740 전라남도여천군  46750 전라남도승주군  46760 전라남도고흥군  46770 전라남도보성군  46780 전라남도화순군  46790 전라남도장흥군  46800 전라남도강진군  46810 전라남도해남군  46820 전라남도영암군  46830 전라남도무안군  46840 전라남도나주군  46850 전라남도함평군  46860 전라남도영광군  46870 전라남도장성군  46880 전라남도완도군  46890 전라남도진도군  46900 전라남도신안군  46910 경상북도 47000 경상북도대구시  47010 경상북도대구시  47011 경상북도대구시  47012 경상북도대구시  47013 경상북도대구시  47014 경상북도대구시  47015 경상북도대구시  47016 경상북도신안동시 47020 경상북도영주군  47050 경상북도포항시  47110 경상북도포항시  47111 경상북도포항시  47113 경상북도경주시  47130 경상북도김천시  47150 경상북도안동시  47170 경상북도구미시  47190 경상북도영주시  47210 경상북도영천시  47230 경상북도상주시  47250 경상북도점촌시  47270 경상북도문경시  47280 경상북도경산시  47290 경상북도달성군  47710 경상북도군위군  47720 경상북도의성군  47730 경상북도안동군  47740 경상북도청송군  47750 경상북도영양군  47760 경상북도영덕군  47770 경상북도영일군  47780 경상북도월성군  47790 경상북도경주군  47795 경상북도영천군  47800 경상북도경산군  47810 경상북도청도군  47820 경상북도고령군  47830 경상북도성주군  47840 경상북도칠곡군  47850 경상북도금릉군  47860 경상북도선산군  47870 경상북도상주군  47880 경상북도문경군  47890 경상북도예천군  47900 경상북도영풍군  47910 경상북도봉화군  47920 경상북도울진군  47930 경상북도울릉군  47940 경상남도 48000 경상남도부산시  48010 경상남도부산시  48011 경상남도부산시  48012 경상남도부산시  48013 경상남도부산시  48014 경상남도부산시  48015 경상남도부산시  48016 경상남도창원군  48050 경상남도울산군  48060 경상남도동래군  48070 경상남도창원시  48110 경상남도창원시  48120 경상남도창원시  48121 경상남도창원시  48123 경상남도창원시  48125 경상남도창원시  48127 경상남도창원시  48129 경상남도울산시  48130 경상남도울산시  48131 경상남도울산시  48133 경상남도울산시  48135 경상남도울산시  48137 경상남도마산시  48150 경상남도마산시  48151 경상남도마산시  48153 경상남도마산시  48160 경상남도진주시  48170 경상남도진해시  48190 경상남도충무시  48210 경상남도통영시  48220 경상남도삼천포시 48230 경상남도사천시  48240 경상남도김해시  48250 경상남도밀양시  48270 경상남도장승포시 48290 경상남도거제시  48310 경상남도양산시  48330 경상남도진양군  48710 경상남도의령군  48720 경상남도함안군  48730 경상남도창녕군  48740 경상남도밀양군  48750 경상남도양산군  48760 경상남도울주군  48770 경상남도울산군  48775 경상남도김해군  48780 경상남도의창군  48790 경상남도창원군  48795 경상남도통영군  48800 경상남도거제군  48810 경상남도고성군  48820 경상남도사천군  48830 경상남도남해군  48840 경상남도하동군  48850 경상남도산청군  48860 경상남도함양군  48870 경상남도거창군  48880 경상남도합천군  48890 제주도  49000 제주도제주시 49110 제주도서귀포시  49130 제주도북제주군  49710 제주도남제주군  49720 제주특별자치도  50000 제주특별자치도제주시 50110 제주특별자치도서귀포시  50130)
  region_code = Hash.new

  value = nil
  key = nil
  lawd_codes.each_with_index do |code, index|
    value = code if index%2 == 0 or index == 0
    key = code if index%2 == 1
    region_code.store(key, value) if index%2 == 1 and index != 0
  end
  puts "[region_code 세팅 완료]"

  # year_month(yyyymm) setting
  months = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]

  # 시작년도 설정
  start_year = 2005

  # 마지막 연도 설정 (시작연도 + N => ex: start_year = 2015, end_year = 2019 then.. add_year = 5)
  add_year = 15
  t_dates = Hash.new
  add_year.times.each_with_index do |i|
    year_months = Array.new
    months.each do |m|
      year_months.push("#{start_year + i}#{m}")
    end
    t_dates.store(start_year + i, year_months)
  end
  puts "[year_month(yyyymm) 세팅 완료]"

  # raw_data insert count
  total_count = 0

  # 공공데이터 추출
  region_code.each do |r_code, r_kr|
    t_dates.each do |yyyy, yyyymms|
      yyyymms.each do |yyyymm|
        service_key = Rails.application.secrets[:service_key_trade]
        api_url = "http://openapi.molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade?LAWD_CD=#{r_code}&DEAL_YMD=#{yyyymm}&serviceKey=#{service_key}"

        begin
          link = URI.parse(api_url)
          request = Net::HTTP::Get.new(link)
          response = Net::HTTP.start(link.host, link.port, :open_timeout => 9999999, :read_timeout => 9999999) {|http|
            http.request(request)
          }
          response = response.body.force_encoding('UTF-8')
        rescue Exception => e
          error_history = ErrorHistory.new(region_code: r_code, year_month: yyyymm)
          next if error_history.save
        end

        data = JSON.parse(Hash.from_xml(response).to_json) rescue next

        begin
          # 응답코드 정상(00)인 경우만 save
          if data["response"]["header"]["resultCode"] == "00"
            if data["response"]["body"]["items"].nil?
              puts "[해당지역, 해당년월 자료 없음 => #{r_code} || #{r_kr} || #{yyyymm}]"
              next
            end

            data["response"]["body"]["items"]["item"].each do |item|

              # 필수 key가 없거나 value가 비어서 오는 경우 next
              item.each do |k, v|
                next v.nil?
                next unless ["거래금액", "년", "법정동", "아파트", "월", "일", "전용면적", "지역코드", "지번", "건축년도"].include? k
              end

              r_data = RawData.new(
                  region_code: item["지역코드"],
                  region_kr: r_kr,
                  year_month: yyyymm,
                  transaction_year: item["년"],
                  transaction_month: item["월"],
                  transaction_day: item["일"],
                  apartment_name: item["아파트"].strip,
                  dong: item["법정동"].strip,
                  address_code: item["지번"].strip,
                  floor: item["층"],
                  space: item["전용면적"].strip,
                  built_year: item["건축년도"],
                  price: item["거래금액"].strip.gsub(',', '').to_i
              )
              if r_data.save
                total_count += 1
                puts "[저장 건수 => #{total_count} || 현재 저장 지역 => #{r_code} || 현재 저장 년월 => #{yyyymm}]" if total_count%50 == 0
              end
            end
          end
        rescue Exception => e
          next
        end

      end
    end
  end

  puts "[end]"
end

desc "[개별 아파트(apartment) entity 확정]"
task confirm_entity_apartment: :environment do
  puts "[start]"
  sql = "
        select region_code, region_kr, dong, apartment_name, address_code, space, built_year
        from raw_data
        group by region_code, region_kr, dong, apartment_name, address_code, space, built_year
        order by region_code, region_kr, dong, apartment_name, address_code, space, built_year
        "

  datas = ActiveRecord::Base.connection.execute(sql)
  count = 0
  datas.each do |data|
    apt = Apartment.new(
                         region_code: data[0],
                         region_kr: data[1],
                         dong: data[2],
                         apartment_name: data[3],
                         address_code: data[4],
                         space: data[5],
                         built_year: data[6]
                        )
    if apt.save
      count += 1
      puts "[저장 건수 => #{count} || 현재 데이터 => #{data}] || 현재 지역코드 => #{data[0]}" if count%1000 == 0
    end
  end

  puts "[end]"
end

desc "[개별 아파트 월별 가격, 가치 산출]"
task calculate_price_and_value: :environment do
  puts "[start]"

  # year_month(yyyymm) setting
  months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

  # 시작년도 설정
  start_year = 2005

  # 마지막 연도 설정 (시작연도 + N => ex: start_year = 2015, end_year = 2019 then.. add_year = 5)
  add_year = 15
  t_dates = Hash.new
  add_year.times.each_with_index do |i|
    year_months = Array.new
    months.each do |m|
      year_months.push(m)
    end
    t_dates.store(start_year + i, year_months)
  end
  puts "[year_month(yyyymm) 세팅 완료]"

  salary = {
      2004 => 37349688,
      2005 => 39025080,
      2006 => 41328648,
      2007 => 43874412,
      2008 => 46807464,
      2009 => 46238268,
      2010 => 48092052,
      2011 => 50983428,
      2012 => 53908368,
      2013 => 55274592,
      2014 => 56815236,
      2015 => 57799980,
      2016 => 58613376,
      2017 => 60031080,
      2018 => 61531857,
      2019 => 63070153
  }

  total_count = 0

  Apartment.all.each do |apt|
    t_dates.each do |yyyy, months|
      months.each do |month|
        yyyymm_datas = RawData.where("region_code = ?", apt.region_code)
                              .where("transaction_year = ?", yyyy)
                              .where("transaction_month = ?", month)
                              .where("dong = ?", apt.dong)
                              .where("apartment_name = ?", apt.apartment_name)
                              .where("address_code = ?", apt.address_code)
                              .where("space = ?", apt.space)
                              .where("built_year = ?", apt.built_year)

        # 해당 년월 거래내역이 없는 경우
        if yyyymm_datas.blank?
          past_datas = ApartmentPriceValue.where("apartment_id = ?", apt.id)
                                          .order("year asc, month asc")
          if past_datas.blank?
            next
          else
            trade_price = past_datas.last.trade_price
            value = past_datas.last.value
          end
        else
          trade_price = (yyyymm_datas.map(&:price).sum)/yyyymm_datas.count
          value = (trade_price*10000)/salary[yyyy].to_f
        end

        price_value = ApartmentPriceValue.new(
                                              apartment_id: apt.id,
                                              trade_price: trade_price,
                                              lease_price: 0,
                                              price_gap: 0,
                                              value: value,
                                              value_gap: 0,
                                              year: yyyy,
                                              month: month
                                              )

        if price_value.save
          total_count += 1
          puts "[개별 아파트 년월별 가격, 가치 저장중 || 현재 아파트 => #{apt.id} || 현재 건수 => #{total_count}]" if total_count%500 == 0
        end

      end
    end
  end

  puts "[end]"
end

# 산출완료 지역코드 => 41130 , 41131 , 41133 , 41135, 41460 , 41461 , 41463 , 41465)
desc "[value_gap 산출]"
task calculate_value_gap: :environment do
  puts "[start]"

  total_count = 0
  # apts = Apartment.where("region_code in ()")
  apts.all.each do |apt|
    p_vs = apt.apartment_price_values
    next if p_vs.blank?

    avg_value = p_vs.map(&:value).sum/p_vs.count
    p_vs.each do |p_v|
      p_v.value_gap = p_v.value - avg_value
      if p_v.save
        total_count += 1
        puts "[value_gap 산출중 => 현재 apt_id : #{apt.id} || 현재 지역코드 : #{apt.region_code} || 현재 건수 : #{total_count}]" if total_count%500 == 0
      end
    end
  end

  puts "[end]"
end

desc "[전, 월세가(lease_price) raw data 수신]"
task lease_get_raw_datas: :environment do
  puts "[start]"

  # region_code setting
  lawd_codes = %w(서울특별시종로구  11110 서울특별시중구  11140 서울특별시용산구 11170 서울특별시성동구 11200 서울특별시광진구 11215 서울특별시동대문구  11230 서울특별시중랑구 11260 서울특별시성북구 11290 서울특별시강북구 11305 서울특별시도봉구 11320 서울특별시노원구 11350 서울특별시은평구 11380 서울특별시서대문구  11410 서울특별시마포구 11440 서울특별시양천구 11470 서울특별시강서구 11500 서울특별시구로구 11530 서울특별시금천구 11545 서울특별시영등포구  11560 서울특별시동작구 11590 서울특별시관악구 11620 서울특별시서초구 11650 서울특별시강남구 11680 서울특별시송파구 11710 서울특별시강동구 11740 부산직할시  21000 부산직할시중구  21110 부산직할시서구  21140 부산직할시동구  21170 부산직할시영도구 21200 부산직할시부산진구  21230 부산직할시동래구 21260 부산직할시남구  21290 부산직할시북구  21320 부산직할시해운대구  21350 부산직할시사하구 21380 부산직할시금정구 21410 부산직할시강서구 21440 대구직할시  22000 대구직할시중구  22110 대구직할시동구  22140 대구직할시서구  22170 대구직할시남구  22200 대구직할시북구  22230 대구직할시수성구 22260 대구직할시달서구 22290 인천직할시  23000 인천직할시중구  23110 인천직할시동구  23140 인천직할시남구  23170 인천직할시남동구 23200 인천직할시북구  23230 인천직할시서구  23260 광주직할시  24000 광주직할시동구  24110 광주직할시서구  24140 광주직할시북구  24170 광주직할시광산구 24200 대전직할시  25000 대전직할시동구  25110 대전직할시중구  25140 대전직할시서구  25170 대전직할시유성구 25200 대전직할시대덕구 25230 부산광역시  26000 부산광역시중구  26110 부산광역시서구  26140 부산광역시동구  26170 부산광역시영도구 26200 부산광역시부산진구  26230 부산광역시동래구 26260 부산광역시남구  26290 부산광역시북구  26320 부산광역시해운대구  26350 부산광역시사하구 26380 부산광역시금정구 26410 부산광역시강서구 26440 부산광역시연제구 26470 부산광역시수영구 26500 부산광역시사상구 26530 부산광역시기장군 26710 대구광역시  27000 대구광역시중구  27110 대구광역시동구  27140 대구광역시서구  27170 대구광역시남구  27200 대구광역시북구  27230 대구광역시수성구 27260 대구광역시달서구 27290 대구광역시달성군 27710 인천광역시  28000 인천광역시중구  28110 인천광역시동구  28140 인천광역시남구  28170 인천광역시미추홀구  28177 인천광역시연수구 28185 인천광역시남동구 28200 인천광역시북구  28230 인천광역시부평구 28237 인천광역시계양구 28245 인천광역시서구  28260 인천광역시강화군 28710 인천광역시옹진군 28720 광주광역시  29000 광주광역시동구  29110 광주광역시서구  29140 광주광역시남구  29155 광주광역시북구  29170 광주광역시광산구 29200 대전광역시  30000 대전광역시동구  30110 대전광역시중구  30140 대전광역시서구  30170 대전광역시유성구 30200 대전광역시대덕구 30230 울산광역시  31000 울산광역시중구  31110 울산광역시남구  31140 울산광역시동구  31170 울산광역시북구  31200 울산광역시울주군 31710 세종특별자치시  36110 세종특별자치시반곡동 36110 세종특별자치시소담동 36110 세종특별자치시보람동 36110 세종특별자치시대평동 36110 세종특별자치시가람동 36110 세종특별자치시한솔동 36110 세종특별자치시나성동 36110 세종특별자치시새롬동 36110 세종특별자치시다정동 36110 세종특별자치시어진동 36110 세종특별자치시종촌동 36110 세종특별자치시고운동 36110 세종특별자치시아름동 36110 세종특별자치시도담동 36110 세종특별자치시조치원읍  36110 세종특별자치시연기면 36110 세종특별자치시연동면 36110 세종특별자치시부강면 36110 세종특별자치시금남면 36110 세종특별자치시장군면 36110 세종특별자치시연서면 36110 세종특별자치시전의면 36110 세종특별자치시전동면 36110 세종특별자치시소정면 36110 경기도  41000 경기도인천시 41010 경기도인천시 41011 경기도인천시 41012 경기도인천시 41013 경기도인천시 41014 경기도부천군 41050 경기도수원시 41110 경기도수원시 41111 경기도수원시 41113 경기도수원시 41115 경기도수원시 41117 경기도성남시 41130 경기도성남시 41131 경기도성남시 41133 경기도성남시 41135 경기도의정부시  41150 경기도안양시 41170 경기도안양시 41171 경기도안양시 41173 경기도부천시 41190 경기도부천시 41191 경기도부천시 41193 경기도부천시 41195 경기도부천시 41197 경기도부천시 41199 경기도광명시 41210 경기도평택시 41220 경기도송탄시 41230 경기도동두천시  41250 경기도안산시 41270 경기도안산시 41271 경기도안산시 41273 경기도고양시 41280 경기도고양시 41281 경기도고양시 41283 경기도고양시 41285 경기도고양시 41287 경기도과천시 41290 경기도구리시 41310 경기도평택시 41330 경기도미금시 41350 경기도남양주시  41360 경기도오산시 41370 경기도시흥시 41390 경기도군포시 41410 경기도의왕시 41430 경기도하남시 41450 경기도용인시 41460 경기도용인시 41461 경기도용인시 41463 경기도용인시 41465 경기도파주시 41480 경기도이천시 41500 경기도안성시 41550 경기도김포시 41570 경기도화성시 41590 경기도광주시 41610 경기도양주시 41630 경기도포천시 41650 경기도여주시 41670 경기도양주군 41710 경기도남양주군  41720 경기도여주군 41730 경기도평택군 41740 경기도화성군 41750 경기도시흥군 41760 경기도파주군 41770 경기도고양군 41780 경기도광주군 41790 경기도연천군 41800 경기도포천군 41810 경기도가평군 41820 경기도양평군 41830 경기도이천군 41840 경기도용인군 41850 경기도안성군 41860 경기도김포군 41870 경기도강화군 41880 경기도옹진군 41890 강원도  42000 강원도울진군 42050 강원도춘천시 42110 강원도원주시 42130 강원도강릉시 42150 강원도동해시 42170 강원도태백시 42190 강원도속초시 42210 강원도삼척시 42230 강원도춘성군 42710 강원도춘천군 42715 강원도홍천군 42720 강원도횡성군 42730 강원도원성군 42740 강원도원주군 42745 강원도영월군 42750 강원도평창군 42760 강원도정선군 42770 강원도철원군 42780 강원도화천군 42790 강원도양구군 42800 강원도인제군 42810 강원도고성군 42820 강원도양양군 42830 강원도명주군 42840 강원도삼척군 42850 충청북도 43000 충청북도제천군  43050 충청북도청주시  43110 충청북도청주시  43111 충청북도청주시  43112 충청북도청주시  43113 충청북도청주시  43114 충청북도충주시  43130 충청북도제천시  43150 충청북도청원군  43710 충청북도보은군  43720 충청북도옥천군  43730 충청북도영동군  43740 충청북도증평군  43745 충청북도진천군  43750 충청북도괴산군  43760 충청북도음성군  43770 충청북도중원군  43780 충청북도제원군  43790 충청북도제천군  43795 충청북도단양군  43800 충청남도 44000 충청남도천안군  44050 충청남도대전시  44110 충청남도대전시  44111 충청남도대전시  44113 충청남도대전시  44115 충청남도천안시  44130 충청남도천안시  44131 충청남도천안시  44133 충청남도공주시  44150 충청남도대천시  44170 충청남도보령시  44180 충청남도온양시  44190 충청남도아산시  44200 충청남도서산시  44210 충청남도논산시  44230 충청남도계룡시  44250 충청남도당진시  44270 충청남도금산군  44710 충청남도대덕군  44720 충청남도연기군  44730 충청남도공주군  44740 충청남도논산군  44750 충청남도부여군  44760 충청남도서천군  44770 충청남도보령군  44780 충청남도청양군  44790 충청남도홍성군  44800 충청남도예산군  44810 충청남도서산군  44820 충청남도태안군  44825 충청남도당진군  44830 충청남도아산군  44840 충청남도천원군  44850 충청남도천안군  44860 전라북도 45000 전라북도금산군  45050 전라북도전주시  45110 전라북도전주시  45111 전라북도전주시  45113 전라북도군산시  45130 전라북도익산시  45140 전라북도이리시  45150 전라북도정주시  45170 전라북도정읍시  45180 전라북도남원시  45190 전라북도김제시  45210 전라북도완주군  45710 전라북도진안군  45720 전라북도무주군  45730 전라북도장수군  45740 전라북도임실군  45750 전라북도남원군  45760 전라북도순창군  45770 전라북도정읍군  45780 전라북도고창군  45790 전라북도부안군  45800 전라북도김제군  45810 전라북도옥구군  45820 전라북도익산군  45830 전라남도 46000 전라남도광주시  46010 전라남도광주시  46011 전라남도광주시  46012 전라남도광주시  46013 전라남도금성시  46020 전라남도송정시  46030 전라남도광산군  46050 전라남도목포시  46110 전라남도여수시  46130 전라남도순천시  46150 전라남도나주시  46170 전라남도여천시  46190 전라남도동광양시 46210 전라남도광양시  46230 전라남도담양군  46710 전라남도곡성군  46720 전라남도구례군  46730 전라남도광양군  46740 전라남도여천군  46750 전라남도승주군  46760 전라남도고흥군  46770 전라남도보성군  46780 전라남도화순군  46790 전라남도장흥군  46800 전라남도강진군  46810 전라남도해남군  46820 전라남도영암군  46830 전라남도무안군  46840 전라남도나주군  46850 전라남도함평군  46860 전라남도영광군  46870 전라남도장성군  46880 전라남도완도군  46890 전라남도진도군  46900 전라남도신안군  46910 경상북도 47000 경상북도대구시  47010 경상북도대구시  47011 경상북도대구시  47012 경상북도대구시  47013 경상북도대구시  47014 경상북도대구시  47015 경상북도대구시  47016 경상북도신안동시 47020 경상북도영주군  47050 경상북도포항시  47110 경상북도포항시  47111 경상북도포항시  47113 경상북도경주시  47130 경상북도김천시  47150 경상북도안동시  47170 경상북도구미시  47190 경상북도영주시  47210 경상북도영천시  47230 경상북도상주시  47250 경상북도점촌시  47270 경상북도문경시  47280 경상북도경산시  47290 경상북도달성군  47710 경상북도군위군  47720 경상북도의성군  47730 경상북도안동군  47740 경상북도청송군  47750 경상북도영양군  47760 경상북도영덕군  47770 경상북도영일군  47780 경상북도월성군  47790 경상북도경주군  47795 경상북도영천군  47800 경상북도경산군  47810 경상북도청도군  47820 경상북도고령군  47830 경상북도성주군  47840 경상북도칠곡군  47850 경상북도금릉군  47860 경상북도선산군  47870 경상북도상주군  47880 경상북도문경군  47890 경상북도예천군  47900 경상북도영풍군  47910 경상북도봉화군  47920 경상북도울진군  47930 경상북도울릉군  47940 경상남도 48000 경상남도부산시  48010 경상남도부산시  48011 경상남도부산시  48012 경상남도부산시  48013 경상남도부산시  48014 경상남도부산시  48015 경상남도부산시  48016 경상남도창원군  48050 경상남도울산군  48060 경상남도동래군  48070 경상남도창원시  48110 경상남도창원시  48120 경상남도창원시  48121 경상남도창원시  48123 경상남도창원시  48125 경상남도창원시  48127 경상남도창원시  48129 경상남도울산시  48130 경상남도울산시  48131 경상남도울산시  48133 경상남도울산시  48135 경상남도울산시  48137 경상남도마산시  48150 경상남도마산시  48151 경상남도마산시  48153 경상남도마산시  48160 경상남도진주시  48170 경상남도진해시  48190 경상남도충무시  48210 경상남도통영시  48220 경상남도삼천포시 48230 경상남도사천시  48240 경상남도김해시  48250 경상남도밀양시  48270 경상남도장승포시 48290 경상남도거제시  48310 경상남도양산시  48330 경상남도진양군  48710 경상남도의령군  48720 경상남도함안군  48730 경상남도창녕군  48740 경상남도밀양군  48750 경상남도양산군  48760 경상남도울주군  48770 경상남도울산군  48775 경상남도김해군  48780 경상남도의창군  48790 경상남도창원군  48795 경상남도통영군  48800 경상남도거제군  48810 경상남도고성군  48820 경상남도사천군  48830 경상남도남해군  48840 경상남도하동군  48850 경상남도산청군  48860 경상남도함양군  48870 경상남도거창군  48880 경상남도합천군  48890 제주도  49000 제주도제주시 49110 제주도서귀포시  49130 제주도북제주군  49710 제주도남제주군  49720 제주특별자치도  50000 제주특별자치도제주시 50110 제주특별자치도서귀포시  50130)
  region_code = Hash.new

  value = nil
  key = nil
  lawd_codes.each_with_index do |code, index|
    value = code if index%2 == 0 or index == 0
    key = code if index%2 == 1
    region_code.store(key, value) if index%2 == 1 and index != 0
  end
  puts "[region_code 세팅 완료]"

  # year_month(yyyymm) setting
  months = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]

  # 시작년도 설정
  start_year = 2005

  # 마지막 연도 설정 (시작연도 + N => ex: start_year = 2015, end_year = 2019 then.. add_year = 5)
  add_year = 15
  t_dates = Hash.new
  add_year.times.each_with_index do |i|
    year_months = Array.new
    months.each do |m|
      year_months.push("#{start_year + i}#{m}")
    end
    t_dates.store(start_year + i, year_months)
  end
  puts "[year_month(yyyymm) 세팅 완료]"

  # raw_data insert count
  total_count = 0

  # 공공데이터 추출
  region_code.each do |r_code, r_kr|
    t_dates.each do |yyyy, yyyymms|
      yyyymms.each do |yyyymm|

        begin
          service_key = Rails.application.secrets[:service_key_lease]
          api_url = "http://openapi.molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptRent?LAWD_CD=#{r_code}&DEAL_YMD=#{yyyymm}&serviceKey=#{service_key}"
          url = URI.parse(api_url)
          response = Net::HTTP.get_response(url)
        rescue Exception => e
          error_history = ErrorHistory.new(region_code: r_code, year_month: yyyymm, region_kr: r_kr, data_type: 2)
          next if error_history.save
        end

          data = JSON.parse(Hash.from_xml(response.body).to_json) rescue next
          next if data.nil?

          # 응답코드 정상(00)인 경우만 save
          if data["response"]["header"]["resultCode"] == "00"
            if data["response"]["body"]["items"].nil?
              puts "[해당지역, 해당년월 자료 없음 => #{r_code} || #{r_kr} || #{yyyymm}]"
              next
            end

            begin
              data["response"]["body"]["items"]["item"].each do |item|

                # 필수 key값 누락 체크 && value nil 체크
                count = 0
                ["건축년도", "년", "법정동", "보증금액", "아파트", "월세금액", "일", "지번", "지역코드", "층", "월", "전용면적", "월세금액"].each do |key|
                  count += 1 unless item.keys.include? key
                  count += 1 if item[key].nil?
                end
                next if count != 0

                # 전세매물 아닌 경우
                next if item["월세금액"].strip.gsub(',', '').to_i != 0

                r_data = LeaseRawData.new(
                    region_code: item["지역코드"],
                    region_kr: r_kr,
                    year_month: yyyymm,
                    transaction_year: item["년"],
                    transaction_month: item["월"],
                    transaction_day: item["일"],
                    apartment_name: item["아파트"].strip,
                    dong: item["법정동"].strip,
                    address_code: item["지번"].strip,
                    floor: item["층"],
                    space: item["전용면적"].strip,
                    built_year: item["건축년도"],
                    deposit: item["보증금액"].strip.gsub(',', '').to_i
                )

                if r_data.save
                  total_count += 1
                  puts "[저장 건수 => #{total_count} || 현재 저장 지역 => #{r_code} || 현재 저장 년월 => #{yyyymm}]" if total_count%50 == 0
                end
              end
            rescue Exception => e
              next
            end

        end

      end
    end
  end

end

desc "[에러 response 재처리]"
task error_history_again: :environment do
  puts "[start]"

  # raw_data insert count
  total_count = 0

  ErrorHistory.where("data_type = ?", 2).where("finish_dncd is null").each do |row|
    service_key = Rails.application.secrets[:service_key_trade]

    # url 확실히 확인 => trade? lease?
    api_url = "http://openapi.molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptRent?LAWD_CD=#{row.region_code}&DEAL_YMD=#{row.year_month}&serviceKey=#{service_key}"

    begin
      link = URI.parse(api_url)
      request = Net::HTTP::Get.new(link)
      response = Net::HTTP.start(link.host, link.port, :open_timeout => 9999999, :read_timeout => 9999999) {|http|
        http.request(request)
      }
      response = response.body.force_encoding('UTF-8')
    rescue Exception => e
      next
    end

    data = JSON.parse(Hash.from_xml(response).to_json) rescue next

    begin
      # 응답코드 정상(00)인 경우만 save
      if data["response"]["header"]["resultCode"] == "00"
        if data["response"]["body"]["items"].nil?
          puts "[해당지역, 해당년월 자료 없음 => #{row.region_code} || #{row.region_kr} || #{row.year_month}]"
          row.finish_dncd = 1
          return unless row.save
          next
        end

        data["response"]["body"]["items"]["item"].each do |item|

          # 필수 key가 없거나 value가 비어서 오는 경우 next
          item.each do |k, v|
            next v.nil?
            next unless ["거래금액", "년", "법정동", "아파트", "월", "일", "전용면적", "지역코드", "지번", "건축년도"].include? k
          end

          r_data = LeaseRawData.new(
                                    region_code: item["지역코드"],
                                    region_kr: row.region_kr,
                                    year_month: row.year_month,
                                    transaction_year: item["년"],
                                    transaction_month: item["월"],
                                    transaction_day: item["일"],
                                    apartment_name: item["아파트"].strip,
                                    dong: item["법정동"].strip,
                                    address_code: item["지번"].strip,
                                    floor: item["층"],
                                    space: item["전용면적"].strip,
                                    built_year: item["건축년도"],
                                    price: item["거래금액"].strip.gsub(',', '').to_i
                                   )

          row.finish_dncd = 1
          next unless row.save

          if r_data.save
            total_count += 1
            puts "[저장 건수 => #{total_count} || 현재 저장 지역 => #{row.region_code} || 현재 저장 년월 => #{row.year_month}]"
          end
        end
      end
    rescue Exception => e
      next
    end
  end

  puts "[end]"
end

desc "[TEST]"
task try_func: :environment do

end